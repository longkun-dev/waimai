<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="im.yuki.waimai.user.service.dao.UserDao">
    <resultMap id="BaseResultMap" type="im.yuki.waimai.user.service.entity.User">
        <result column="id" property="id" jdbcType="VARCHAR"/>
        <result column="uid" property="uid" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="phone_number" property="phoneNumber" jdbcType="VARCHAR"/>
        <result column="role_code" property="roleCode" jdbcType="VARCHAR"/>
        <result column="role_name" property="roleName" jdbcType="VARCHAR"/>
        <result column="account_status_code" property="accountStatusCode" jdbcType="VARCHAR"/>
        <result column="account_status_name" property="accountStatusName" jdbcType="VARCHAR"/>
        <result column="created_by" property="createdBy" jdbcType="VARCHAR"/>
        <result column="created_time" property="createdTime" jdbcType="TIMESTAMP"/>
        <result column="updated_by" property="updatedBy" jdbcType="VARCHAR"/>
        <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        `id`,
        `uid`,
        username,
        `password`,
        phone_number,
        role_code,
        account_status_code
        created_by,
        created_time,
        updated_by,
        updated_time
    </sql>

    <insert id="save" parameterType="im.yuki.waimai.user.service.entity.User">
        insert into tb_user(uid,
                            `username`,
                            `password`,
                            phone_number,
                            role_code,
                            account_status_code,
                            created_by,
                            created_time,
                            updated_by,
                            updated_time)
        values (#{uid},
                #{username},
                #{password},
                #{phoneNumber},
                #{roleCode},
                #{accountStatusCode},
                #{createdBy},
                #{createdTime},
                #{updatedBy},
                #{updatedTime})
    </insert>

    <update id="updateAccountStatus" parameterType="java.lang.String">
        update tb_user
        set account_status_code = #{newAccountStatus}
        where uid = #{uid}
    </update>

    <update id="update" parameterType="im.yuki.waimai.user.service.entity.User">
        update tb_user
        set username            = #{username},
            password            = #{password},
            phone_number        = #{phoneNumber},
            role_code           = #{roleCode},
            account_status_code = #{accountStatusCode}
        where uid = #{uid}
    </update>

    <delete id="deleteById" parameterType="java.lang.Integer">
        delete
        from tb_user
        where id = #{id}
    </delete>

    <select id="findAll" resultMap="BaseResultMap">
        select user.uid,
               user.username,
               user.password,
               user.phone_number,
               account_status.account_status_code,
               account_status.account_status_name,
               role.role_code,
               role.role_name,
               user.created_by,
               user.created_time
        from tb_user as user
                 left join tb_role as role
                           on user.role_code = role.role_code
                 left join tb_account_status account_status
                           on user.account_status_code = account_status.account_status_code
        order by user.uid
    </select>

    <select id="count" resultType="java.lang.Integer">
        select count(1) as count
        from tb_user
        where 1 = 1
    </select>

    <select id="findById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        where id = #{id}
    </select>

    <select id="findByUidAndPassword" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        where uid = #{uid}
          and password = #{password}
        limit 1
    </select>

    <select id="findByUsername" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        where username = #{username}
    </select>

    <select id="findByUid" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        where uid = #{uid}
    </select>

    <select id="findByUsernameOrRoleCode" parameterType="java.lang.String" resultMap="BaseResultMap">
        select user.uid,
               user.username,
               user.password,
               user.phone_number,
               account_status.account_status_name,
               role.role_name,
               user.created_by,
               user.created_time
        from tb_user as user
                 left join tb_role as role
                           on user.role_code = role.role_code
                 left join tb_account_status account_status
                           on user.account_status_code = account_status.account_status_code
        where 1 = 1
        <if test="username != null and username != ''">
            and user.username like concat('%', #{username}, '%')
        </if>
        <if test="roleCode != null and roleCode != ''">
            and role.role_code = #{roleCode}
        </if>
        order by user.uid
    </select>

</mapper>
